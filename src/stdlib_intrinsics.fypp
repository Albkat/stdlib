#:include "common.fypp"
#:set R_KINDS_TYPES = list(zip(REAL_KINDS, REAL_TYPES, REAL_SUFFIX))
#:set C_KINDS_TYPES = list(zip(CMPLX_KINDS, CMPLX_TYPES, CMPLX_SUFFIX))
#:set RC_KINDS_TYPES = R_KINDS_TYPES + C_KINDS_TYPES
#:set RANKS = range(2, MAXRANK + 1)

! This module is based on https://github.com/jalvesz/fast_math
module stdlib_intrinsics
    !!Replacement for certain Fortran intrinsic functions offering either faster and/or more accurate implementations.
    !! ([Specification](../page/specs/stdlib_intrinsics.html))
    use stdlib_kinds
    implicit none
    private

    interface fsum 
        #:for rk, rt, rs in RC_KINDS_TYPES
        pure module function fsum_1d_${rs}$(a) result(s)
            ${rt}$, intent(in) :: a(:)
            ${rt}$ :: s
        end function
        pure module function fsum_1d_${rs}$_mask(a,mask) result(s)
            ${rt}$, intent(in) :: a(:)
            logical, intent(in) :: mask(:)
            ${rt}$ :: s
        end function
        #:for rank in RANKS
        pure module function fsum_${rank}$d_${rs}$( x, mask ) result( s )
            ${rt}$, intent(in) :: x${ranksuffix(rank)}$
            logical, intent(in), optional :: mask${ranksuffix(rank)}$
            ${rt}$ :: s
        end function
        pure module function fsum_${rank}$d_dim_${rs}$( x , dim, mask ) result( s )
            ${rt}$, intent(in) :: x${ranksuffix(rank)}$
            integer, intent(in):: dim
            logical, intent(in), optional :: mask${ranksuffix(rank)}$
            ${rt}$ :: s${reduced_shape('x', rank, 'dim')}$
        end function
        #:endfor
        #:endfor
    end interface
    public :: fsum

    interface fsum_kahan
        #:for rk, rt, rs in RC_KINDS_TYPES
        pure module function fsum_kahan_1d_${rs}$(a) result(s)
            ${rt}$, intent(in) :: a(:)
            ${rt}$ :: s
        end function
        pure module function fsum_kahan_1d_${rs}$_mask(a,mask) result(s)
            ${rt}$, intent(in) :: a(:)
            logical, intent(in) :: mask(:)
            ${rt}$ :: s
        end function
        #:endfor
    end interface
    public :: fsum_kahan

    interface fprod
        #:for rk, rt, rs in RC_KINDS_TYPES
        pure module function fprod_${rs}$(a,b) result(p)
            ${rt}$, intent(in) :: a(:)
            ${rt}$, intent(in) :: b(:)
            ${rt}$ :: p
        end function
        #:endfor
    end interface
    public :: fprod

    interface fprod_kahan
        #:for rk, rt, rs in RC_KINDS_TYPES
        pure module function fprod_kahan_${rs}$(a,b) result(p)
            ${rt}$, intent(in) :: a(:)
            ${rt}$, intent(in) :: b(:)
            ${rt}$ :: p
        end function
        #:endfor
    end interface
    public :: fprod_kahan

    interface kahan_kernel 
        #:for rk, rt, rs in RC_KINDS_TYPES
        module procedure :: kahan_kernel_${rs}$
        module procedure :: kahan_kernel_m_${rs}$
        #:endfor
    end interface
    public :: kahan_kernel
    
contains

#:for rk, rt, rs in RC_KINDS_TYPES
elemental subroutine kahan_kernel_${rs}$(a,s,c)
    ${rt}$, intent(in) :: a
    ${rt}$, intent(inout) :: s
    ${rt}$, intent(inout) :: c
    ${rt}$ :: t, y
    y = a - c
    t = s + y
    c = (t - s) - y
    s = t
end subroutine  
elemental subroutine kahan_kernel_m_${rs}$(a,s,c,m)
    ${rt}$, intent(in) :: a
    ${rt}$, intent(inout) :: s
    ${rt}$, intent(inout) :: c
    logical, intent(in) :: m
    ${rt}$ :: t, y
    y = a - c
    t = s + y
    c = (t - s) - y
    s = merge( s , t , m )
end subroutine 
#:endfor

end module stdlib_intrinsics
