#:include "common.fypp"
#:set R_KINDS_TYPES = list(zip(REAL_KINDS, REAL_TYPES, REAL_SUFFIX))
#:set C_KINDS_TYPES = list(zip(CMPLX_KINDS, CMPLX_TYPES, CMPLX_SUFFIX))
#:set RC_KINDS_TYPES = R_KINDS_TYPES + C_KINDS_TYPES

#:def cnjg(type,expression)
#:if 'complex' in type
conjg(${expression}$)
#:else
${expression}$
#:endif
#:enddef

! This module is based on https://github.com/jalvesz/fast_math
submodule(stdlib_intrinsics) stdlib_intrinsics_sum
    !!Replacement for certain Fortran intrinsic functions offering either faster and/or more accurate implementations.
    !! ([Specification](../page/specs/stdlib_intrinsics.html))
    use stdlib_kinds
    use stdlib_constants
    implicit none

    integer, parameter :: chunk = 64
    
contains

#:for rk, rt, rs in RC_KINDS_TYPES
pure module function fsum_1d_${rs}$(a) result(s)
    ${rt}$, intent(in) :: a(:)
    ${rt}$ :: s
    ${rt}$ :: abatch(chunk)
    integer :: i, dr, rr
    ! -----------------------------
    dr = size(a)/chunk
    rr = size(a) - dr*chunk

    abatch = zero_${rs}$
    do i = 1, dr
      abatch(1:chunk) = abatch(1:chunk) + a(chunk*i-chunk+1:chunk*i)
    end do
    abatch(1:rr) = abatch(1:rr) + a(size(a)-rr+1:size(a))

    s = zero_${rs}$
    do i = 1, chunk/2
      s = s + abatch(i)+abatch(chunk/2+i)
    end do
end function

pure module function fsum_1d_${rs}$_mask(a,mask) result(s)
    ${rt}$, intent(in) :: a(:)
    logical, intent(in) :: mask(:)
    ${rt}$ :: s
    ${rt}$ :: abatch(chunk)
    integer :: i, dr, rr
    ! -----------------------------
    dr = size(a)/chunk
    rr = size(a) - dr*chunk

    abatch = zero_${rs}$
    do i = 1, dr
      abatch(1:chunk) = abatch(1:chunk) + merge( zero_${rs}$ , a(chunk*i-chunk+1:chunk*i) , mask(chunk*i-chunk+1:chunk*i) )
    end do
    abatch(1:rr) = abatch(1:rr) + merge( zero_${rs}$ , a(size(a)-rr+1:size(a)) , mask(size(a)-rr+1:size(a)) )
    
    s = zero_${rs}$
    do i = 1, chunk/2
        s = s + abatch(i)+abatch(chunk/2+i)
    end do
end function
#:endfor

#:for rk, rt, rs in RC_KINDS_TYPES
pure module function fsum_kahan_1d_${rs}$(a) result(s)
    ${rt}$, intent(in) :: a(:)
    ${rt}$ :: s
    ${rt}$ :: sbatch(chunk)
    ${rt}$ :: cbatch(chunk)
    integer :: i, dr, rr
    ! -----------------------------
    dr = size(a)/(chunk)
    rr = size(a) - dr*chunk     
    sbatch = zero_${rs}$
    cbatch = zero_${rs}$
    do i = 1, dr
        call vkahan( a(chunk*i-chunk+1:chunk*i) , sbatch(1:chunk) , cbatch(1:chunk) )
    end do
    call vkahan( a(size(a)-rr+1:size(a)) , sbatch(1:rr) , cbatch(1:rr) )      

    s = zero_${rs}$
    do i = 1,chunk
        call vkahan( sbatch(i) , s , cbatch(i) )
    end do
end function

pure module function fsum_kahan_1d_${rs}$_mask(a,mask) result(s)
    ${rt}$, intent(in) :: a(:)
    logical, intent(in) :: mask(:)
    ${rt}$ :: s
    ${rt}$ :: sbatch(chunk)
    ${rt}$ :: cbatch(chunk)
    integer :: i, dr, rr
    ! -----------------------------
    dr = size(a)/(chunk)
    rr = size(a) - dr*chunk     
    sbatch = zero_${rs}$
    cbatch = zero_${rs}$
    do i = 1, dr
        call vkahan( a(chunk*i-chunk+1:chunk*i) , sbatch(1:chunk) , cbatch(1:chunk) , mask(chunk*i-chunk+1:chunk*i) )
    end do
    call vkahan( a(size(a)-rr+1:size(a)) , sbatch(1:rr) , cbatch(1:rr) , mask(size(a)-rr+1:size(a)) )

    s = zero_${rs}$
    do i = 1,chunk
        call vkahan( sbatch(i) , s , cbatch(i) )
    end do
end function
#:endfor

end submodule stdlib_intrinsics_sum
