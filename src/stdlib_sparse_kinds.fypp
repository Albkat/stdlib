#:include "common.fypp"
#:set R_KINDS_TYPES = list(zip(REAL_KINDS, REAL_TYPES, REAL_SUFFIX))
#:set C_KINDS_TYPES = list(zip(CMPLX_KINDS, CMPLX_TYPES, CMPLX_SUFFIX))
#:set KINDS_TYPES = R_KINDS_TYPES+C_KINDS_TYPES
!> The `stdlib_sparse_kinds` module provides derived type definitions for different sparse matrices
!>
! This code was modified from https://github.com/jalvesz/FSPARSE by its author: Alves Jose
module stdlib_sparse_kinds
    use ieee_arithmetic
    use stdlib_kinds, only: int8, int16, int32, int64, sp, dp, xdp, qp
    implicit none
    
    private
  
    ! -- Global parameters
    enum, bind(C)
        enumerator :: sparse_full  !> Full Sparse matrix (no symmetry considerations)
        enumerator :: sparse_lower !> Symmetric Sparse matrix with triangular inferior storage
        enumerator :: sparse_upper !> Symmetric Sparse matrix with triangular supperior storage
    end enum
    public :: sparse_full, sparse_lower, sparse_upper

    #:for k1, t1, s1 in (R_KINDS_TYPES)
    ${t1}$, parameter, public :: zero_${s1}$ = 0._${k1}$
    ${t1}$, parameter, public :: one_${s1}$ = 1._${k1}$
    #:endfor
    #:for k1, t1, s1 in (C_KINDS_TYPES)
    ${t1}$, parameter, public :: zero_${s1}$ = (0._${k1}$,0._${k1}$)
    ${t1}$, parameter, public :: one_${s1}$ = (1._${k1}$,1._${k1}$)
    #:endfor

    ! -- Classes

    !> Base sparse type holding the meta data related to the storage capacity of a matrix.
    type, public, abstract :: sparse_type
      integer :: nrows = 0 !> number of rows
      integer :: ncols = 0 !> number of columns
      integer :: nnz   = 0 !> number of non-zero values
      integer :: storage = sparse_full !> assumed storage symmetry
    end type

    !> COO: COOrdinates compresed format 
    type, public, extends(sparse_type) :: COO_type
      logical               :: is_sorted = .false. !> wether the matrix is ordered or not
      integer, allocatable  :: index(:,:) !> Matrix coordinates index(2,nnz)
    contains
      procedure :: malloc => malloc_coo
    end type

    #:for k1, t1, s1 in (KINDS_TYPES)
    type, public, extends(COO_type) :: COO_${s1}$
        ${t1}$, allocatable :: data(:) 
    contains
        procedure :: get => get_value_coo_${s1}$
        procedure :: set => set_value_coo_${s1}$
    end type
    #:endfor

    !> CSR: Compressed sparse row or Yale format
    type, extends(sparse_type) :: CSR_type  
      integer, allocatable  :: col(:)    !> matrix column pointer
      integer, allocatable  :: rowptr(:) !> matrix row pointer
    contains
      procedure :: malloc => malloc_csr
    end type
  
    #:for k1, t1, s1 in (KINDS_TYPES)
    type, public, extends(CSR_type) :: CSR_${s1}$
        ${t1}$, allocatable :: data(:) 
    contains
        procedure :: get => get_value_csr_${s1}$
        procedure :: set => set_value_csr_${s1}$
    end type
    #:endfor

    !> CSC: Compressed sparse column
    type, extends(sparse_type) :: CSC_type  
      integer, allocatable  :: colptr(:) !> matrix column pointer
      integer, allocatable  :: row(:)    !> matrix row pointer
    contains
      procedure :: malloc => malloc_csc
    end type
  
    #:for k1, t1, s1 in (KINDS_TYPES)
    type, public, extends(CSC_type) :: CSC_${s1}$
        ${t1}$, allocatable :: data(:) 
    contains
        procedure :: get => get_value_csc_${s1}$
        procedure :: set => set_value_csc_${s1}$
    end type
    #:endfor
  
    !> Compressed ELLPACK
    type, extends(sparse_type) :: ELL_type 
      integer               :: K = 0 !> maximum number of nonzeros per row
      integer, allocatable  :: index(:,:) !> column indices
    contains
      procedure :: malloc => malloc_ell
    end type
  
    #:for k1, t1, s1 in (KINDS_TYPES)
    type, public, extends(ELL_type) :: ELL_${s1}$
        ${t1}$, allocatable :: data(:,:) 
    contains
        procedure :: get => get_value_ell_${s1}$
        procedure :: set => set_value_ell_${s1}$
    end type
    #:endfor

    !> Compressed SELL-C 
    !> Reference : https://library.eecs.utk.edu/storage/files/ut-eecs-14-727.pdf
    type, public, extends(sparse_type) :: SELLC_type 
      integer               :: chunk_size = 8 !>  default chunk size
      integer, allocatable  :: rowptr(:) !> row pointer
      integer, allocatable  :: col(:,:)  !> column indices
    end type
  
    #:for k1, t1, s1 in (KINDS_TYPES)
    type, public, extends(SELLC_type) :: SELLC_${s1}$
        ${t1}$, allocatable :: data(:,:) 
    end type
    #:endfor

contains

    !> (re)Allocate matrix memory for the COO type
    subroutine malloc_coo(self,num_rows,num_cols,nnz)
        class(COO_type) :: self
        integer, intent(in) :: num_rows !> number of rows
        integer, intent(in) :: num_cols !> number of columns
        integer, intent(in) :: nnz      !> number of non zeros

        integer,  allocatable :: temp_idx(:,:)
        !-----------------------------------------------------

        self%nrows = num_rows
        self%ncols = num_cols
        self%nnz   = nnz

        if(.not.allocated(self%index)) then
            allocate(temp_idx(2,nnz) , source = 0 )
        else
            allocate(temp_idx(2,nnz) , source = self%index )
        end if
        call move_alloc(from=temp_idx,to=self%index)

        select type(self)
            #:for k1, t1, s1 in (KINDS_TYPES)
            type is(COO_${s1}$)
                block
                ${t1}$, allocatable :: temp_data_${s1}$(:)
                if(.not.allocated(self%data)) then
                    allocate(temp_data_${s1}$(nnz) , source = zero_${s1}$ )
                else
                    allocate(temp_data_${s1}$(nnz) , source = self%data )
                end if
                call move_alloc(from=temp_data_${s1}$,to=self%data)
                end block
            #:endfor
        end select
    end subroutine

    !> (re)Allocate matrix memory for the CSR type
    subroutine malloc_csr(self,num_rows,num_cols,nnz)
        class(CSR_type) :: self
        integer, intent(in) :: num_rows !> number of rows
        integer, intent(in) :: num_cols !> number of columns
        integer, intent(in) :: nnz      !> number of non zeros

        integer,  allocatable :: temp_idx(:)
        !-----------------------------------------------------

        self%nrows = num_rows
        self%ncols = num_cols
        self%nnz   = nnz

        if(.not.allocated(self%col)) then
            allocate(temp_idx(nnz) , source = 0 )
        else
            allocate(temp_idx(nnz) , source = self%col )
        end if
        call move_alloc(from=temp_idx,to=self%col)

        if(.not.allocated(self%rowptr)) then
            allocate(temp_idx(num_rows+1) , source = 0 )
        else
            allocate(temp_idx(num_rows+1) , source = self%rowptr )
        end if
        call move_alloc(from=temp_idx,to=self%rowptr)

        select type(self)
            #:for k1, t1, s1 in (KINDS_TYPES)
            type is(CSR_${s1}$)
                block
                ${t1}$, allocatable :: temp_data_${s1}$(:)
                if(.not.allocated(self%data)) then
                    allocate(temp_data_${s1}$(nnz) , source = zero_${s1}$ )
                else
                    allocate(temp_data_${s1}$(nnz) , source = self%data )
                end if
                call move_alloc(from=temp_data_${s1}$,to=self%data)
                end block
            #:endfor
        end select
    end subroutine

    !> (re)Allocate matrix memory for the CSC type
    subroutine malloc_csc(self,num_rows,num_cols,nnz)
        class(CSC_type) :: self
        integer, intent(in) :: num_rows !> number of rows
        integer, intent(in) :: num_cols !> number of columns
        integer, intent(in) :: nnz      !> number of non zeros

        integer,  allocatable :: temp_idx(:)
        !-----------------------------------------------------

        self%nrows = num_rows
        self%ncols = num_cols
        self%nnz   = nnz

        if(.not.allocated(self%row)) then
            allocate(temp_idx(nnz) , source = 0 )
        else
            allocate(temp_idx(nnz) , source = self%row )
        end if
        call move_alloc(from=temp_idx,to=self%row)

        if(.not.allocated(self%colptr)) then
            allocate(temp_idx(num_cols+1) , source = 0 )
        else
            allocate(temp_idx(num_cols+1) , source = self%colptr )
        end if
        call move_alloc(from=temp_idx,to=self%colptr)

        select type(self)
            #:for k1, t1, s1 in (KINDS_TYPES)
            type is(CSC_${s1}$)
                block
                ${t1}$, allocatable :: temp_data_${s1}$(:)
                if(.not.allocated(self%data)) then
                    allocate(temp_data_${s1}$(nnz) , source = zero_${s1}$ )
                else
                    allocate(temp_data_${s1}$(nnz) , source = self%data )
                end if
                call move_alloc(from=temp_data_${s1}$,to=self%data)
                end block
            #:endfor
        end select
    end subroutine

    !> (re)Allocate matrix memory for the ELLPACK type
    subroutine malloc_ell(self,num_rows,num_cols,num_nz_rows)
        class(ELL_type) :: self
        integer, intent(in) :: num_rows    !> number of rows
        integer, intent(in) :: num_cols    !> number of columns
        integer, intent(in) :: num_nz_rows !> number of non zeros per row

        integer,  allocatable :: temp_idx(:,:)
        !-----------------------------------------------------

        self%nrows = num_rows
        self%ncols = num_cols
        self%K     = num_nz_rows

        if(.not.allocated(self%index)) then
            allocate(temp_idx(num_rows,num_nz_rows) , source = 0 )
        else
            allocate(temp_idx(num_rows,num_nz_rows) , source = self%index )
        end if
        call move_alloc(from=temp_idx,to=self%index)

        select type(self)
            #:for k1, t1, s1 in (KINDS_TYPES)
            type is(ELL_${s1}$)
                block
                ${t1}$, allocatable :: temp_data_${s1}$(:,:)
                if(.not.allocated(self%data)) then
                    allocate(temp_data_${s1}$(num_rows,num_nz_rows) , source = zero_${s1}$ )
                else
                    allocate(temp_data_${s1}$(num_rows,num_nz_rows) , source = self%data )
                end if
                call move_alloc(from=temp_data_${s1}$,to=self%data)
                end block
            #:endfor
        end select
    end subroutine

    !==================================================================
    ! data accessors
    !==================================================================

    #:for k1, t1, s1 in (KINDS_TYPES)
    pure function get_value_coo_${s1}$(self,ik,jk) result(val)
        class(COO_${s1}$), intent(in) :: self
        ${t1}$ :: val
        integer, intent(in) :: ik, jk
        integer :: k
        ! naive implementation
        if( (ik<1 .or. ik>self%nrows) .or. (jk<1 .or. jk>self%ncols) ) then
            val = ieee_value( 0._${k1}$ , ieee_quiet_nan)
            return
        end if
        do k = 1,self%nnz
            if( ik == self%index(1,k) .and. jk == self%index(2,k) ) then
                val = self%data(k)
                return
            end if
        end do
        val = zero_${s1}$
    end function

    subroutine set_value_coo_${s1}$(self,val,ik,jk)
        class(COO_${s1}$), intent(inout) :: self
        ${t1}$, intent(in) :: val
        integer, intent(in) :: ik, jk
        integer :: k
        ! naive implementation
        do k = 1,self%nnz
            if( ik == self%index(1,k) .and. jk == self%index(2,k) ) then
                self%data(k) = val
                return
            end if
        end do
    end subroutine

    #:endfor

    #:for k1, t1, s1 in (KINDS_TYPES)
    pure function get_value_csr_${s1}$(self,ik,jk) result(val)
        class(CSR_${s1}$), intent(in) :: self
        ${t1}$ :: val
        integer, intent(in) :: ik, jk
        integer :: k
        ! naive implementation
        if( (ik<1 .or. ik>self%nrows) .or. (jk<1 .or. jk>self%ncols) ) then
            val = ieee_value( 0._${k1}$ , ieee_quiet_nan)
            return
        end if
        do k = self%rowptr(ik), self%rowptr(ik+1)-1
            if( jk == self%col(k) ) then
                val = self%data(k)
                return
            end if
        end do
        val = zero_${s1}$
    end function

    subroutine set_value_csr_${s1}$(self,val,ik,jk)
        class(CSR_${s1}$), intent(inout) :: self
        ${t1}$, intent(in) :: val
        integer, intent(in) :: ik, jk
        integer :: k
        ! naive implementation
        do k = self%rowptr(ik), self%rowptr(ik+1)-1
            if( jk == self%col(k) ) then
                self%data(k) = val
                return
            end if
        end do
    end subroutine

    #:endfor

    #:for k1, t1, s1 in (KINDS_TYPES)
    pure function get_value_csc_${s1}$(self,ik,jk) result(val)
        class(CSC_${s1}$), intent(in) :: self
        ${t1}$ :: val
        integer, intent(in) :: ik, jk
        integer :: k
        ! naive implementation
        if( (ik<1 .or. ik>self%nrows) .or. (jk<1 .or. jk>self%ncols) ) then
            val = ieee_value( 0._${k1}$ , ieee_quiet_nan)
            return
        end if
        do k = self%colptr(jk), self%colptr(jk+1)-1
            if( ik == self%row(k) ) then
                val = self%data(k)
                return
            end if
        end do
        val = zero_${s1}$
    end function

    subroutine set_value_csc_${s1}$(self,val,ik,jk)
        class(CSC_${s1}$), intent(inout) :: self
        ${t1}$, intent(in) :: val
        integer, intent(in)  :: ik, jk
        integer :: k
        ! naive implementation
        do k = self%colptr(jk), self%colptr(jk+1)-1
            if( ik == self%row(k) ) then
                self%data(k) = val
                return
            end if
        end do
    end subroutine

    #:endfor

    #:for k1, t1, s1 in (KINDS_TYPES)
    pure function get_value_ell_${s1}$(self,ik,jk) result(val)
        class(ELL_${s1}$), intent(in) :: self
        ${t1}$ :: val
        integer, intent(in) :: ik, jk
        integer :: k
        ! naive implementation
        if( (ik<1 .or. ik>self%nrows) .or. (jk<1 .or. jk>self%ncols) ) then
            val = ieee_value( 0._${k1}$ , ieee_quiet_nan)
            return
        end if
        do k = 1 , self%K
            if( jk == self%index(ik,k) ) then
                val = self%data(ik,k)
                return
            end if
        end do
        val = zero_${s1}$
    end function

    subroutine set_value_ell_${s1}$(self,val,ik,jk)
        class(ELL_${s1}$), intent(inout) :: self
        ${t1}$, intent(in) :: val
        integer, intent(in)  :: ik, jk
        integer :: k
        ! naive implementation
        do k = 1 , self%K
            if( jk == self%index(ik,k) ) then
                self%data(ik,k) = val
                return
            end if
        end do
    end subroutine

    #:endfor
    
end module stdlib_sparse_kinds